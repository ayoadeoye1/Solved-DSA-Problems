```
function binSearch(arr, ele) {
  let start = 0;
  let end = arr.length-1;
  while (start <= end) {
    let mid =  Math.floor((start+end)/2);
    let guess = arr[mid];
    if(ele === guess){
      console.log(mid);
      return mid;
    }
    console.log(arr.slice(start, end));
    if(guess > ele){
      end = mid-1;
    }else {
      start = mid+1;
    }
  }
  console.log(null)
  return null;
}

binSearch([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,200,300,400,500,600,700,701], 11)
```

- traveling salesperson
- Sieve of Eratosthenes

Euclid's Algorithm
function divandConc(a, b) {
  if(a === 0){ return b}
  if(b === 0){ return a}
  console.log(a,b)
  return divandConc(b, a%b)
}
divandConc(90,36)

---------------------------

function subArrLeft(arr, piv) {
  let sub = []
  for (let i = 0; i < arr.length; i++) {
    if(arr[i]<piv){
      sub.push(arr[i])
    }
  }
  return sub;
}
function subArrRight(arr, piv) {
  let sub = []
  for (let i = 0; i < arr.length; i++) {
    if(arr[i]>piv){
      sub.push(arr[i])
    }
  }
  return sub;
}
function quickSort(arr) {
  if(arr.length < 2){
    return arr;
  }
  let pivot = arr[0]
  let left = subArrLeft(arr, pivot);
  let right = subArrRight(arr, pivot);
  // console.log(left, right, "AsdfG");
  return [...quickSort(left), pivot, ...quickSort(right)];
}
console.log(quickSort([20,21,1,26,30,29,28,2,22,3,4,23,5,24,15,6,25,7]));


//Kadane's Algorithm.
//bruteforce
function maxSub(arr) {
  let max = -Infinity;
  for (let i = 0; i < arr.length; i++) {
    let currMax = 0;
    for (let j = i; j < arr.length; j++) {
      currMax = currMax + arr[j];
      max = Math.max(max, currMax);
    }
  }
  console.log(max);
  return max;
}
//optimised
function maxSub(arr) {
  let max = -Infinity;
  let currMax = 0;
  for (let i = 0; i < arr.length; i++) {
    currMax = Math.max(currMax+arr[i], arr[i]);
    max = Math.max(currMax, max);
  }
  console.log(max);
  return max;
}

//bfs in JS
const graph = {
  "you": ["alice", "bob", "claire"],
  "bob": ["anuj", "peggy"],
  "alice": ["peggy"],
  "claire": ["thom", "jonny"],
  "anuj": [],
  "peggy": [],
  "thom": [],
  "jonny": []
};
function bfs(name) {
  let queue = [name];
  let visited = {};
  let arr = [];
  while (queue.length>0) {
    const current = queue.shift();
    if(visited[current]) continue;
    
    console.log(current, graph[current], visited)
    visited[current] = true;
    arr.push(current);
    for(let x of graph[current]){
      // console.log("X Queue", x, queue)
      if(!visited[x]) queue.push(x);
    }
  }
  console.log("Array From Graph: ", arr);
}
bfs("you")